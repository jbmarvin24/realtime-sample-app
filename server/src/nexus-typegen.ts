/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  MessageType: "Comment" | "Like"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Mutation: {};
  Notification: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    fromUsername: string; // String!
    id: number; // Int!
    isRead: boolean; // Boolean!
    message: string; // String!
    postId: number; // Int!
    postOwnerUsername: string; // String!
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  Post: { // root type
    body: string; // String!
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id: number; // Int!
    updatedAt?: NexusGenScalars['Date'] | null; // Date
    username: string; // String!
  }
  Query: {};
  Subscription: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPost: NexusGenRootTypes['Post']; // Post!
    notificationCreate: NexusGenRootTypes['Notification']; // Notification!
    notificationRead: NexusGenRootTypes['Notification']; // Notification!
  }
  Notification: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    fromUsername: string; // String!
    id: number; // Int!
    isRead: boolean; // Boolean!
    message: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: number; // Int!
    postOwnerUsername: string; // String!
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  Post: { // field return type
    body: string; // String!
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: number; // Int!
    updatedAt: NexusGenScalars['Date'] | null; // Date
    username: string; // String!
  }
  Query: { // field return type
    myUnreadNotifications: Array<NexusGenRootTypes['Notification'] | null> | null; // [Notification]
    notifications: Array<NexusGenRootTypes['Notification'] | null> | null; // [Notification]
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Subscription: { // field return type
    notificationCreated: NexusGenRootTypes['Notification'] | null; // Notification
    postCreated: NexusGenRootTypes['Post'] | null; // Post
    truths: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createPost: 'Post'
    notificationCreate: 'Notification'
    notificationRead: 'Notification'
  }
  Notification: { // field return type name
    createdAt: 'Date'
    fromUsername: 'String'
    id: 'Int'
    isRead: 'Boolean'
    message: 'String'
    post: 'Post'
    postId: 'Int'
    postOwnerUsername: 'String'
    updatedAt: 'Date'
  }
  Post: { // field return type name
    body: 'String'
    createdAt: 'Date'
    id: 'Int'
    updatedAt: 'Date'
    username: 'String'
  }
  Query: { // field return type name
    myUnreadNotifications: 'Notification'
    notifications: 'Notification'
    posts: 'Post'
  }
  Subscription: { // field return type name
    notificationCreated: 'Notification'
    postCreated: 'Post'
    truths: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      body: string; // String!
      username: string; // String!
    }
    notificationCreate: { // args
      fromUsername: string; // String!
      postId: number; // Int!
      postOwnerUsername: string; // String!
      type: NexusGenEnums['MessageType']; // MessageType!
    }
    notificationRead: { // args
      notificationId: number; // Int!
    }
  }
  Query: {
    myUnreadNotifications: { // args
      username: string; // String!
    }
  }
  Subscription: {
    notificationCreated: { // args
      currentUsername: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}